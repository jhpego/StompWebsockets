export declare type LoggerFunction = (message: string, ...args: any[]) => any;
export interface StompProtocolLoggingListeners {
    readonly error: LoggerFunction;
    readonly warn: LoggerFunction;
    readonly info: LoggerFunction;
    readonly debug: LoggerFunction;
    readonly silly: LoggerFunction;
}
export declare function promiseRejectionHandler(className: string, functionName: string): (e: Error) => any;
export declare function setLoggingListeners(listeners: StompProtocolLoggingListeners): void;
export declare const log: StompProtocolLoggingListeners;
export declare type WebSocketMessageHandler = (event: {
    data: any;
    type: string;
    target: WebSocket;
}) => void;
export interface WebSocket {
    addEventListener(method: 'message', cb?: WebSocketMessageHandler): void;
    addEventListener(method: 'close', cb?: (event: any) => void): void;
    addEventListener(method: 'error', cb?: (event: any) => void): void;
    removeEventListener(method: 'message', cb?: WebSocketMessageHandler): void;
    removeEventListener(method: 'close', cb?: (event: any) => void): void;
    removeEventListener(method: 'error', cb?: (event: any) => void): void;
    close(code?: number, data?: string): void;
    send(data: any, cb?: (err?: Error) => void): void;
}
