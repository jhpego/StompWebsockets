import { HeartbeatOptions } from "./heartbeat";
export declare type StompHeaders = {
    [key: string]: string;
};
export interface StompConfig {
    connectTimeout?: number;
    newlineFloodingResetTime?: number;
    headersFilter?: (headerName: string) => boolean;
    heartbeat?: HeartbeatOptions;
    maxBufferSize?: number;
}
export declare class StompSessionData {
    id: string | null;
    authenticated: boolean;
    subscriptions: {
        [key: string]: boolean;
    };
    transactions: {
        [key: string]: boolean;
    };
}
export declare class StompError extends Error {
    details?: string | undefined;
    constructor(message?: string, details?: string | undefined);
}
export declare class StompFrame {
    readonly command: string;
    headers: StompHeaders;
    body: string;
    constructor(command: string, headers?: StompHeaders, body?: string);
    setHeader(key: string, value: string): void;
    toString(): string;
}
export declare class StompEventEmitter<E extends string> {
    private readonly emitter;
    on(event: E, callback: (...args: any[]) => void): void;
    emit(event: E, ...args: any[]): void;
}
