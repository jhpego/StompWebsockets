"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
;
const validationOk = { isValid: true };
function isPresent(value) {
    return typeof value !== 'undefined' && value !== null;
}
function requireHeader(headerName) {
    return (frame) => {
        if (isPresent(frame.headers[headerName])) {
            return validationOk;
        }
        return {
            isValid: false,
            message: `Header '${headerName}' is required for ${frame.command}`,
            details: 'Frame: ' + frame.toString()
        };
        ;
    };
}
exports.requireHeader = requireHeader;
function requireOneHeader(...headerNames) {
    return (frame) => {
        for (var headerName of headerNames) {
            if (isPresent(frame.headers[headerName])) {
                return validationOk;
            }
        }
        return {
            isValid: false,
            message: `One of the following Headers '${headerNames.join(', ')}' is \
                required for ${frame.command}`,
            details: 'Frame: ' + frame.toString()
        };
    };
}
exports.requireOneHeader = requireOneHeader;
function requireAllHeaders(...headerNames) {
    return (frame) => {
        for (var headerName of headerNames) {
            if (!isPresent(frame.headers[headerName])) {
                return {
                    isValid: false,
                    message: `Header '${headerName}' is required for ${frame.command}`,
                    details: 'Frame: ' + frame.toString()
                };
            }
        }
        return validationOk;
    };
}
exports.requireAllHeaders = requireAllHeaders;
function headerMatchesRegex(headerName, regex) {
    return (frame) => {
        var headerValue = frame.headers[headerName];
        if (typeof headerValue !== 'string' || !headerValue.match(regex)) {
            return {
                isValid: false,
                message: `Header '${headerName}' has value '${headerValue}' which \
                    does not match against the following regex: \
                    '${regex}'`,
                details: 'Frame: ' + frame.toString()
            };
        }
        return validationOk;
    };
}
exports.headerMatchesRegex = headerMatchesRegex;
