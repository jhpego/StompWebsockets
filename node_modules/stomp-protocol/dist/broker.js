"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const model_1 = require("./model");
const protocol_1 = require("./protocol");
const session_1 = require("./session");
const utils_1 = require("./utils");
const stream_1 = require("./stream");
const frame_1 = require("./frame");
class StompBrokerLayerImpl {
    constructor(listener, config) {
        this.listener = listener;
        this.config = config;
        this.nextSessionId = utils_1.counter(); //TODO: let the user choice the Session ID generation strategy.
        this.sessions = new Map();
        this.subscriptions = new BrokerSubscriptionsRegistry();
    }
    accept(socket) {
        const sessionId = this.nextSessionId(); //TODO: validate session ID before using it (in case of custom generation strategy)
        const streamLayer = stream_1.openStream(socket);
        const frameLayer = new frame_1.StompFrameLayer(streamLayer);
        frameLayer.headerFilter = this.config && this.config.headersFilter || frameLayer.headerFilter;
        const clientListener = new BrokerClientCommandListener(this, sessionId);
        const session = new session_1.StompServerSessionLayer(frameLayer, clientListener);
        clientListener.session = session;
        session.sendErrorHandler = (err) => this.listener.sessionError(sessionId, err);
        session.data.id = sessionId;
        this.sessions.set(sessionId, session);
        return sessionId;
    }
    forDestination(destination, callback) {
        this.subscriptions.forDestination(destination, callback);
    }
    sendMessage(message, destination, sessionId) {
        if (sessionId) {
            if (!this.sessions.has(sessionId)) {
                throw new Error(`Session with ID ${sessionId} not found`);
            }
            this.subscriptions.forSessionDestination(sessionId, destination, (subscription) => {
                this.sendToSession(message, sessionId, subscription).catch(e => this.listener.sessionError(sessionId, e));
            });
        }
        else {
            this.forDestination(destination, (sessionId, subscription) => {
                this.sendToSession(message, sessionId, subscription).catch(e => this.listener.sessionError(sessionId, e));
            });
        }
    }
    async sendToSession(message, sessionId, subscription) {
        const session = this.sessions.get(sessionId);
        const headers = Object.assign({
            subscription: subscription.id,
            destination: subscription.destination
        }, message.headers);
        await session.message(headers, message.body);
    }
    sessionEnd(sessionId) {
        this.subscriptions.remove(sessionId);
        this.sessions.delete(sessionId);
    }
}
exports.StompBrokerLayerImpl = StompBrokerLayerImpl;
class BrokerClientCommandListener {
    constructor(broker, sessionId) {
        this.broker = broker;
        this.sessionId = sessionId;
        this.nextSubscriptionId = utils_1.counter(); //TODO: let the user choice the Subscription ID generation strategy.
        this.sessionError = (err) => this.broker.listener.sessionError(this.sessionId, err);
        this.transactions = new Set();
    }
    connect(headers) {
        this.doConnect(headers).catch(this.sessionError);
    }
    send(headers, body) {
        this.doSend(headers, body).catch(this.sessionError);
    }
    subscribe(headers) {
        this.doSubscribe(headers).catch(this.sessionError);
    }
    unsubscribe(headers) {
        this.doUnubscribe(headers).catch(this.sessionError);
    }
    begin(headers) {
        this.doBegin(headers).catch(this.sessionError);
    }
    commit(headers) {
        this.doBeforeDeletingTransaction(headers, (id) => this.broker.listener.committingTransaction(this.sessionId, id));
    }
    abort(headers) {
        this.doBeforeDeletingTransaction(headers, (id) => this.broker.listener.abortingTransaction(this.sessionId, id));
    }
    ack(headers) {
        this.doAcknowledge(true, headers).catch(this.sessionError);
    }
    nack(headers) {
        this.doAcknowledge(false, headers).catch(this.sessionError);
    }
    disconnect(headers) {
        this.doDisconnect(headers).catch(this.sessionError);
    }
    onProtocolError(error) {
        this.broker.listener.sessionError(this.sessionId, error);
    }
    onEnd() {
        this.broker.sessionEnd(this.sessionId);
        this.broker.listener.sessionEnd(this.sessionId);
        //TODO: cleanup subscriptions
    }
    async doConnect(headers) {
        try {
            await this.broker.listener.connecting(this.sessionId, headers);
            await this.session.connected({ version: this.session.protocolVersion, server: 'StompBroker/1.0.0' }); //TODO: configure broker name
        }
        catch (err) {
            utils_1.log.debug("StompBrokerLayer: error while connecting session %s: %O", this.session.data.id, err);
            await this.sendErrorFrame(err);
        }
    }
    /**
     * Sends an ERROR frame.
     * @param  headers Stomp Headers
     * @param  err     Stomp Error
     */
    async sendErrorFrame(err, headers) {
        headers = headers || {};
        headers.message = err.message;
        await this.session.error(headers, err.details);
    }
    async doSend(headers, body) {
        try {
            await this.broker.listener.incomingMessage(this.sessionId, headers, body);
            await this.receiptCallback(headers);
        }
        catch (err) {
            await this.receiptCallback(headers, err);
        }
    }
    async doDisconnect(headers) {
        try {
            await this.broker.listener.disconnecting(this.sessionId, headers);
            await this.receiptCallback(headers);
        }
        catch (err) {
            await this.receiptCallback(headers, err);
        }
    }
    /**
     * Sends a RECEIPT frame, if the request headers contain a receipt ID.
     * @param  headers Stomp Headers that may contain a receipt ID
     * @param  err     Stomp Error object created by user
     */
    async receiptCallback(headers, err) {
        const receipt = typeof headers.receipt === 'string' ? headers.receipt : undefined;
        if (err) {
            await this.sendErrorFrame(err, receipt ? { 'receipt-id': receipt } : undefined);
        }
        else if (receipt) {
            await this.session.receipt({ 'receipt-id': receipt });
        }
    }
    async doSubscribe(headers) {
        if (this.session.protocolVersion == protocol_1.StompProtocolHandlerV10.version && !headers.id) {
            // version 1.0 does not require subscription id header, we must generate it.
            headers.id = 'sub_' + this.nextSubscriptionId();
        }
        const subscription = Object.seal({
            id: headers.id,
            destination: headers.destination,
            ack: headers.ack || 'auto'
        });
        try {
            this.broker.subscriptions.add(this.sessionId, subscription);
            try {
                await this.broker.listener.subscribing(this.sessionId, subscription);
            }
            catch (err) {
                this.broker.subscriptions.remove(this.sessionId, subscription.id);
                throw err;
            }
            await this.receiptCallback(headers);
        }
        catch (err) {
            await this.receiptCallback(headers, err);
        }
    }
    async doUnubscribe(headers) {
        let subscription;
        if (headers.id) {
            subscription = this.broker.subscriptions.get(this.sessionId, headers.id);
        }
        else {
            // Fallback for version 1.0: get the first available subscription for the given destination.
            this.broker.subscriptions.forSessionDestination(this.sessionId, headers.destination, (sub) => {
                subscription = sub;
                return false;
            });
        }
        try {
            if (!subscription) {
                utils_1.log.debug("StompBrokerLayer: error while unsubscribing, cannot find subscription for session %s: %O", this.sessionId, headers);
                throw new model_1.StompError("Cannot unsubscribe: unknown subscription ID or destination.");
            }
            await this.broker.listener.unsubscribing(this.sessionId, subscription);
            this.broker.subscriptions.remove(this.sessionId, subscription.id);
            await this.receiptCallback(headers);
        }
        catch (err) {
            await this.receiptCallback(headers, err);
        }
    }
    async doAcknowledge(value, headers) {
        const ack = {
            value,
            messageId: headers.id || headers.messageId
        };
        if (headers.transaction) {
            ack.transaction = headers.transaction;
        }
        if (headers.subscription) {
            ack.subscription = headers.subscription;
        }
        try {
            await this.broker.listener.acknowledging(this.sessionId, ack);
            await this.receiptCallback(headers);
        }
        catch (err) {
            await this.receiptCallback(headers, err);
        }
    }
    async doBegin(headers) {
        try {
            const id = headers.transaction;
            if (this.transactions.has(id)) {
                throw new model_1.StompError(`Transaction with ID ${id} already started for session ${this.sessionId}.`);
            }
            this.transactions.add(id);
            try {
                await this.broker.listener.beginningTransaction(this.sessionId, id);
            }
            catch (err) {
                this.transactions.delete(id);
                throw err;
            }
            await this.receiptCallback(headers);
        }
        catch (err) {
            await this.receiptCallback(headers, err);
        }
    }
    async doBeforeDeletingTransaction(headers, fn) {
        try {
            const id = headers.transaction;
            if (!this.transactions.has(id)) {
                throw new model_1.StompError(`Transaction with ID ${id} not found for session ${this.sessionId}.`);
            }
            try {
                await fn(id);
            }
            catch (err) {
                throw err;
            }
            finally {
                this.transactions.delete(id);
            }
            await this.receiptCallback(headers);
        }
        catch (err) {
            await this.receiptCallback(headers, err);
        }
    }
}
class BrokerSubscriptionsRegistry {
    constructor() {
        this.bySessionId = new Map();
        this.byDestination = new Map();
        // TODO: filter method
    }
    add(sessionId, subscription) {
        let sessionReg = this.bySessionId.get(sessionId);
        if (!sessionReg) {
            this.bySessionId.set(sessionId, sessionReg = new SessionSubscriptionsRegistry(sessionId));
        }
        sessionReg.add(subscription);
        let arr = this.byDestination.get(subscription.destination);
        if (!arr) {
            this.byDestination.set(subscription.destination, arr = []);
        }
        arr.push(sessionReg);
    }
    get(sessionId, subscriptionId) {
        const reg = this.bySessionId.get(sessionId);
        return reg && reg.get(subscriptionId);
    }
    remove(sessionId, subscriptionId) {
        const reg = this.bySessionId.get(sessionId);
        if (reg) {
            if (subscriptionId) { // remove just a single subscription for the given session
                this.removeFromDestinationMap(reg, subscriptionId);
                reg.remove(subscriptionId);
            }
            else {
                // remove all subscriptions for the given session
                for (let dest of reg.destinations) {
                    const arr = this.byDestination.get(dest);
                    let i = arr.findIndex(s => s === reg);
                    while (i >= 0) {
                        arr.splice(i, 1);
                        i = arr.findIndex(s => s === reg);
                    }
                }
                this.bySessionId.delete(sessionId);
            }
        }
        return !!reg;
    }
    removeFromDestinationMap(reg, subscriptionId) {
        const subscription = reg.get(subscriptionId);
        if (subscription) {
            const destination = subscription.destination;
            let i = 0; // counts how many subscription of this session to the given destination
            reg.forDestination(destination, () => (i++, true));
            if (i === 1) { // last subscription of this session for the given destination
                const arr = this.byDestination.get(destination);
                arr.splice(arr.findIndex(s => s === reg), 1);
            }
        }
    }
    forSessionDestination(sessionId, destination, callback) {
        const reg = this.bySessionId.get(sessionId);
        if (reg) {
            reg.forDestination(destination, sub => callback(sub) || true);
        }
    }
    forDestination(destination, callback) {
        const sessionRegs = this.byDestination.get(destination);
        if (sessionRegs) {
            sessionRegs.every(reg => reg.forDestination(destination, callback.bind(null, reg.sessionId)) || true);
        }
    }
}
exports.BrokerSubscriptionsRegistry = BrokerSubscriptionsRegistry;
class SessionSubscriptionsRegistry {
    constructor(sessionId) {
        this.sessionId = sessionId;
        this.byId = new Map();
        this.byDestination = new Map();
    }
    get destinations() {
        return this.byDestination.keys();
    }
    add(subscription) {
        if (this.byId.has(subscription.id)) {
            throw new model_1.StompError(`Subscription ID ${subscription.id} already found for session ${this.sessionId}.`);
        }
        this.byId.set(subscription.id, subscription);
        let arr = this.byDestination.get(subscription.destination);
        if (!arr) {
            this.byDestination.set(subscription.destination, arr = []);
        }
        arr.push(subscription);
    }
    remove(id) {
        const subscription = this.byId.get(id);
        if (subscription) {
            this.byId.delete(id);
            const arr = this.byDestination.get(subscription.destination);
            arr.splice(arr.findIndex(s => s.id === id), 1);
        }
        return !!subscription;
    }
    get(id) {
        const sub = this.byId.get(id);
        return sub && Object.seal(Object.assign({}, sub));
    }
    forDestination(destination, callback) {
        const arr = this.byDestination.get(destination);
        if (arr) {
            return arr.every(callback);
        }
        return true;
    }
}
exports.SessionSubscriptionsRegistry = SessionSubscriptionsRegistry;
//# sourceMappingURL=data:application/json;base64,