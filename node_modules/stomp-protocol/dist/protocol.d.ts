import { StompFrame, StompHeaders, StompError } from './model';
import { StompSession } from './session';
import { StompValidator } from './validators';
export interface StompServerCommands {
    connected(headers: StompHeaders): void;
    message(headers: StompHeaders, body?: string): void;
    receipt(headers: StompHeaders): void;
    error(headers: StompHeaders, body?: string): void;
}
export interface StompClientCommands {
    connect(headers: StompHeaders): void;
    send(headers: StompHeaders, body?: string): void;
    subscribe(headers: StompHeaders): void;
    unsubscribe(headers: StompHeaders): void;
    begin(headers: StompHeaders): void;
    commit(headers: StompHeaders): void;
    abort(headers: StompHeaders): void;
    ack(headers: StompHeaders): void;
    nack(headers: StompHeaders): void;
    disconnect(headers: StompHeaders): void;
}
export interface StompCommandListener {
    onProtocolError(error: StompError): void;
    onEnd(): void;
}
export interface StompClientCommandListener extends StompClientCommands, StompCommandListener {
}
export interface StompServerCommandListener extends StompServerCommands, StompCommandListener {
}
export declare type StompCommand<L extends StompCommandListener> = {
    validators: StompValidator[];
    handle: (frame: StompFrame, session: StompSession<L>) => void;
};
export declare type StompCommands<L extends StompCommandListener> = {
    [key: string]: StompCommand<L>;
};
export declare type StompProtocolHandler = {
    version: string;
    client: StompCommands<StompClientCommandListener>;
    server: StompCommands<StompServerCommandListener>;
};
export declare const StompProtocolHandlerV10: StompProtocolHandler;
export declare const StompProtocolHandlerV11: StompProtocolHandler;
export declare const StompProtocolHandlerV12: StompProtocolHandler;
