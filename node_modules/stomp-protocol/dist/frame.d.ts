import { StompFrame, StompEventEmitter, StompError, StompConfig } from "./model";
import { StompStreamLayer } from "./stream";
import { Heartbeat } from "./heartbeat";
export declare type StompFrameEvent = 'frame' | 'error' | 'end';
export declare class StompFrameLayer {
    readonly stream: StompStreamLayer;
    readonly emitter: StompEventEmitter<StompFrameEvent>;
    maxBufferSize: number;
    private frame;
    private contentLength;
    private buffer;
    private status;
    private newlineFloodingResetTime;
    private lastNewlineTime;
    private newlineCounter;
    private connectTimeout?;
    headerFilter: (headerName: string) => boolean;
    heartbeat: Heartbeat;
    constructor(stream: StompStreamLayer, options?: StompConfig);
    private init;
    /**
     * Transmit a frame using the underlying stream layer.
     */
    send(frame: StompFrame): Promise<void>;
    /**
     * Closes the underlying stream layer.
     */
    close(): Promise<void>;
    /**
     * Main entry point for frame parsing. It's a state machine that expects
     * the standard [ command - headers - body ] structure of a frame.
     */
    private onData;
    private onEnd;
    private parseCommand;
    /**
     * Parse and checks frame headers format. When content-length header is
     * detected, it can be used by the body parser.
     */
    private parseHeaders;
    /**
     * Parse frame body, using both the content-length header and null char to
     * determine the frame end.
     */
    private parseBody;
    private appendToBody;
    private emitFrame;
    /**
     * Parses the error
     */
    private parseError;
    /**
     * Pops a new line from the stream
     * @return {Buffer} the new line available
     */
    private popLine;
    /**
     * Check if there is a new line in the current stream chunk
     * @return {boolean}
     */
    private hasLine;
    /**
     * Emits a new StompFrameError and sets the current status to ERROR
     * @param  {StompFrameError} error
     */
    error(error: StompError): void;
    /**
     * Set the current status to the next available, otherwise it returns in COMMAND status.
     */
    private incrementStatus;
}
